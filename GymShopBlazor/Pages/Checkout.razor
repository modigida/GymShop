@using System.Security.Claims
@using Blazored.LocalStorage
@using GymShopBlazor.ApiService
@using GymShopBlazor.AuthService
@using GymShopBlazor.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject CartService CartService
@inject OrderService OrderService
@inject UserService UserService
@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="checkout-container">
    <h3>Slutför ditt köp</h3>

    <h5>Dina uppgifter</h5>

    <div class="input-group">
        <input type="email" placeholder="E-postadress" @bind="user.Email" @bind:event="oninput" />
        <input type="password" placeholder="Lösenord" @bind="user.Password" @bind:event="oninput" />
    </div>
    
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="text-danger">@ErrorMessage</p>
    }

    @if (IsCustomer)
    {
        <button class="btn btn-success" @onclick="CompleteOrder">Beställ</button>
    }
    else
    {
        <button class="btn-btn-success" @onclick="Login">Logga in</button>
        <button class="btn-btn-success" @onclick="BecomeMember">Bli medlem</button>
    }

</div>

@code {
    private UserLogin user = new();
    private bool IsCustomer = false;
    private string ErrorMessage = "";
    private UserResponse LoggedInUser { get; set; }
    public OrderResponse NewOrder { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst("sub")?.Value;
        
            if (Guid.TryParse(userIdClaim, out Guid userId))
            {
                LoggedInUser = await UserService.GetUserById(userId);
                IsCustomer = user.IsInRole("Customer");
            }
        }

        StateHasChanged();
    }

    private async Task CompleteOrder()
    {
        if (LoggedInUser == null)
        {
            return;
        }
        // if (!string.Equals(enteredEmail, LoggedInUser.Email, StringComparison.OrdinalIgnoreCase) ||
        //     !string.Equals(enteredPassword, LoggedInUser., StringComparison.OrdinalIgnoreCase))
        // {
        //     ErrorMessage = "Felaktiga användaruppgifter.";
        //     return;
        // }
        var statuses = await OrderService.GetOrderStatuses();
        var orderProducts = CartService.CartItems.Select(item => new OrderProduct()
            {
                ProductId = item.ProductId,
                Quantity = item.Quantity,
                CurrentPrice = item.CurrentPrice,
                ProductName = item.ProductName
            }).ToList();

        var order = new OrderCreate
        {
            PurchaseDate = DateTime.Now,
                User = LoggedInUser,
            OrderProducts = orderProducts,
            OrderStatus = statuses.FirstOrDefault(os => os.Id == 1)

        };
        NewOrder = await OrderService.CreateOrder(order);
        var orderId = NewOrder.Id;
        Navigation.NavigateTo($"/orderConfirmation/{orderId}");
    }
    private async Task Login()
    {
        var token = await UserService.LoginUser(user);
        if (!string.IsNullOrEmpty(token))
        {
            await _localStorage.SetItemAsync("authToken", token);

            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;
            var userIdClaim = user.FindFirst("sub")?.Value;

            if (Guid.TryParse(userIdClaim, out Guid userId))
            {
                LoggedInUser = await UserService.GetUserById(userId);
                IsCustomer = user.IsInRole("Customer");
            }

            ((AuthStateProvider)AuthenticationStateProvider).NotifyUserAuthentication(token);

            StateHasChanged();
        }
    }
    private async Task BecomeMember()
    {
        Navigation.NavigateTo("/register");
    }
}
