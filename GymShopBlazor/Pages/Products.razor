@page "/products"
@using GymShopBlazor.ApiService
@using GymShopBlazor.Helpers
@using GymShopBlazor.Models
@inject ProductService ProductService

<head>
    <link href="css/product.css" rel="stylesheet" />
</head>

<h3>@(string.IsNullOrEmpty(CategoryName) ? "Alla produkter" : Translations.GetTranslatedCategoryName(category.Name))</h3>


@if (AllProducts == null)
{
    <div class="loading-info">
        <h3>Laddar produkter...</h3>
    </div>
}
else if (!AllProducts.Any())
{
    <div class="loading-info">
        <h3>Inga produkter hittades.</h3>
    </div>
}
else
{
    <div class="form-group">
        <input type="text" class="form-control" placeholder="Sök efter produkt..." @bind="_searchQuery" @oninput="FilterProducts" />
    </div>

    <div class="product-list">
        @foreach (var product in FilteredProducts)
        {
            <ProductComponent Product="product" OnProductClick="OpenModal" />
        }
    </div>
}

<div class="modal fade @(_isModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@_selectedProduct?.Name</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (_selectedProduct != null)
                {
                    <div class="form-group">
                        <div>
                            @if (!string.IsNullOrEmpty(_selectedProduct.ImageUrl))
                            {
                                <img src="@_selectedProduct.ImageUrl" alt="Produktbild" class="img-fluid" style="max-width: 200px; height: auto;" />
                            }
                            else
                            {
                                <img src="noImage.jpg" alt="Produktbild" class="img-fluid" style="max-width: 200px; height: auto;" />
                            }
                        </div>
                    </div>

                    <div class="form-group">
                        <label><strong>Kategori:</strong> @Translations.GetTranslatedCategoryName(_selectedProduct.Category.Name)</label>
                    </div>

                    <div class="form-group">
                        <label><strong>Lagerstatus:</strong> @Translations.GetTranslatedProductStatus(_selectedProduct.ProductStatus.Name)</label>
                    </div>

                    <div class="form-group">
                        <label><strong>Lagersaldo:</strong> @_selectedProduct.Balance ST</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Pris:</strong> @_selectedProduct.Price SEK</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Produktbeskrivning:</strong> @_selectedProduct.Description</label>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Stäng</button>
                @if (_selectedProduct?.Balance > 0)
                {
                    <button type="button" class="add-to-cart-button" @onclick="() => HandleAddToCart(_selectedProduct)">Köp</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Inject]
    private NavigationManager Navigation { get; set; }

    public string? CategoryName { get; set; }
    private List<Category> Categories { get; set; } = new();
    private Category category { get; set; }
    private List<Product> AllProducts { get; set; } = new();
    private List<Product> FilteredProducts { get; set; } = new List<Product>();
    private string _searchQuery = "";
    
    private Product? _selectedProduct;
    private bool _isModalOpen = false;

    [Inject] private CartService CartService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Categories = await ProductService.GetCategories();
        Navigation.LocationChanged += OnLocationChanged;
        await LoadProducts();
        ExtractCategoryFromUri();
    }

    private void FilterProducts(ChangeEventArgs e)
    {
        _searchQuery = e.Value?.ToString() ?? "";
        FilteredProducts = AllProducts
            .Where(p => p.Name.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        ExtractCategoryFromUri();
        await LoadProducts();
        await base.OnParametersSetAsync();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        ExtractCategoryFromUri();
        await LoadProducts();
    }

    private void ExtractCategoryFromUri()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = uri.Query;

        if (!string.IsNullOrEmpty(query) && query.Contains("category"))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(query);
            CategoryName = queryParams["category"];
            category = Categories.FirstOrDefault(c => c.Name.ToLower() == CategoryName.ToLower());
        }
        else
        {
            CategoryName = null;
        }

        StateHasChanged();
    }
    private async Task LoadProducts()
    {
        if (string.IsNullOrEmpty(CategoryName))
        {
            AllProducts = await ProductService.GetAll();
            FilteredProducts = AllProducts;
        }
        else
        {
            AllProducts = await ProductService.GetByCategory(category);
            FilteredProducts = AllProducts;
        }

        StateHasChanged();
    }

    private void OpenModal(Product product)
    {
        _selectedProduct = product;
        _isModalOpen = true;
    }

    private void CloseModal()
    {
        _isModalOpen = false;
        _selectedProduct = null;
    }

    private async Task HandleAddToCart(Product product)
    {
        if (product.Balance > 0)
        {
            CartService.AddToCart(product);
            Console.WriteLine($"{product.Name} tillagd i varukorgen!");
            CloseModal();
        }
    }
}
