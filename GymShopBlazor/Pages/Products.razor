@page "/products"
@using GymShopBlazor.ApiService
@using GymShopBlazor.Helpers
@using GymShopBlazor.Models
@inject ProductService ProductService

<head>
    <link href="css/product.css" rel="stylesheet" />
</head>

<h3>@(string.IsNullOrEmpty(CategoryName) ? "Alla produkter" : Translations.GetTranslatedCategoryName(category.Name))</h3>


@if (products == null)
{
    <div class="loading-info">
        <h3>Laddar produkter...</h3>
    </div>
}
else if (!products.Any())
{
    <div class="loading-info">
        <h3>Inga produkter hittades.</h3>
    </div>
}
else
{
    <div class="form-group">
        <input type="text" class="form-control" placeholder="Sök efter produkt..." @bind="searchQuery" @oninput="FilterProducts" />
    </div>

    <div class="product-list">
        @foreach (var product in filteredProducts)
        {
            <ProductComponent Product="product" OnAddToCart="HandleAddToCart" OnProductClick="OpenModal" />
        }
    </div>
}

<div class="modal fade @(isModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@selectedProduct?.Name</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (selectedProduct != null)
                {
                    <div class="form-group">
                        <div>
                            <img src="@selectedProduct.ImageUrl" alt="Produktbild" class="img-fluid" style="max-width: 200px; height: auto;" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label><strong>Kategori:</strong> @Translations.GetTranslatedCategoryName(selectedProduct.Category.Name)</label>
                    </div>

                    <div class="form-group">
                        <label><strong>Lagerstatus:</strong> @Translations.GetTranslatedProductStatus(selectedProduct.ProductStatus.Name)</label>
                    </div>

                    <div class="form-group">
                        <label><strong>Lagersaldo:</strong> @selectedProduct.Balance ST</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Pris:</strong> @selectedProduct.Price SEK</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Produktbeskrivning:</strong> @selectedProduct.Description</label>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Stäng</button>
                @if (selectedProduct?.Balance > 0)
                {
                    <button type="button" class="add-to-cart-button" @onclick="() => HandleAddToCart(selectedProduct)">Köp</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Inject]
    private NavigationManager Navigation { get; set; }

    public string CategoryName { get; set; }
    private List<Category> categories { get; set; }
    private Category category { get; set; }

    private List<Product> products { get; set; } = new();

    private List<Product> filteredProducts = new List<Product>();
    private string searchQuery = "";

    private Product? selectedProduct;
    private bool isModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        categories = await ProductService.GetCategories();
        Navigation.LocationChanged += OnLocationChanged;
        await LoadProducts();
        ExtractCategoryFromUri();
    }

    private void FilterProducts(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        filteredProducts = products
            .Where(p => p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        ExtractCategoryFromUri();
        await LoadProducts();
        await base.OnParametersSetAsync();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        ExtractCategoryFromUri();
        await LoadProducts();
    }

    private void ExtractCategoryFromUri()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = uri.Query;

        if (!string.IsNullOrEmpty(query) && query.Contains("category"))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(query);
            CategoryName = queryParams["category"];
            category = categories.FirstOrDefault(c => c.Name.ToLower() == CategoryName.ToLower());
        }
        else
        {
            CategoryName = null;
        }

        StateHasChanged();
    }
    private async Task LoadProducts()
    {
        if (string.IsNullOrEmpty(CategoryName))
        {
            products = await ProductService.GetAll();
            filteredProducts = products;
        }
        else
        {
            products = await ProductService.GetByCategory(category);
            filteredProducts = products;
        }

        StateHasChanged();
    }

    private void OpenModal(Product product)
    {
        selectedProduct = product;
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        selectedProduct = null;
    }

    private async Task HandleAddToCart(Product product)
    {
        selectedProduct = product;
        // cant by more than selectedProduct.Balance
        Console.WriteLine($"{product.Name} tillagd i varukorgen!");
    }
}
