@page "/products"
@using GymShopBlazor.ApiService
@using GymShopBlazor.Models
@inject ProductService ProductService

<h3>@(string.IsNullOrEmpty(CategoryName) ? "Alla produkter" : GetTranslatedCategoryName(category.Name))</h3>


@if (AllProducts == null)
{
    <p>Laddar produkter...</p>
}
else if (!AllProducts.Any())
{
    <p>Inga produkter hittades.</p>
}
else
{
    <div class="product-list">
        @foreach (var product in AllProducts)
        {
            <ProductComponent Product="product" OnAddToCart="HandleAddToCart" />
        }
    </div>
}

@code {
    [Inject]
    private NavigationManager Navigation { get; set; }

    private Dictionary<string, string> categoryTranslations = new()
    {
        { "Clothes", "Träningskläder" },
        { "Supplements", "Kosttillskott" },
        { "Equipments", "Träningstillbehör" },
    };

    public string CategoryName { get; set; }
    private List<Category> categories { get; set; }
    private Category category { get; set; }

    public List<Product> AllProducts { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await ProductService.GetCategories();
        Navigation.LocationChanged += OnLocationChanged;
        await LoadProducts();
        ExtractCategoryFromUri();
    }


    protected override async Task OnParametersSetAsync()
    {
        ExtractCategoryFromUri();
        await LoadProducts();
        await base.OnParametersSetAsync();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        ExtractCategoryFromUri();
        await LoadProducts();
    }

    private void ExtractCategoryFromUri()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = uri.Query;

        if (!string.IsNullOrEmpty(query) && query.Contains("category"))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(query);
            CategoryName = queryParams["category"];
            category = categories.FirstOrDefault(c => c.Name.ToLower() == CategoryName.ToLower());
        }
        else
        {
            CategoryName = null;
        }

        StateHasChanged();
    }
    private async Task LoadProducts()
    {
        if (string.IsNullOrEmpty(CategoryName))
        {
            AllProducts = await ProductService.GetAll();
        }
        else
        {
            AllProducts = await ProductService.GetByCategory(category);
        }

        StateHasChanged();
    }

    private string GetTranslatedCategoryName(string categoryName)
    {
        if (categoryTranslations.ContainsKey(categoryName))
        {
            return categoryTranslations[categoryName];
        }
        return categoryName;
    }

    private async Task HandleAddToCart(Product product)
    {

    }
}
