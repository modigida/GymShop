@page "/user"
@using GymShopBlazor.ApiService
@using GymShopBlazor.AuthService
@using GymShopBlazor.Helpers
@using GymShopBlazor.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject OrderService OrderService

<head>
    <link href="css/userstyling.css" rel="stylesheet" />
</head>

@if (currentUser != null)
{
    <div class="user-form">
        <h3>Välkommen @currentUser.FirstName @currentUser.LastName</h3>

        <div class="mb-3">
            <label for="firstname" class="form-label">Förnamn</label>
            <input type="text" class="form-control" id="firstname" placeholder="Förnamn" @bind="currentUser.FirstName" @oninput="SetUpdated" />
        </div>

        <div class="mb-3">
            <label for="lastname" class="form-label">Efternamn</label>
            <input type="text" class="form-control" id="lastname" placeholder="Efternamn" @bind="currentUser.LastName" @oninput="SetUpdated" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">E-post</label>
            <input type="email" class="form-control" id="email" placeholder="E-post" @bind="currentUser.Email" @oninput="SetUpdated" />
        </div>

        <div class="mb-3">
            <label for="phone" class="form-label">Telefonnummer</label>
            <input type="text" class="form-control" id="phone" placeholder="Telefonnummer" @bind="currentUser.Phone" @oninput="SetUpdated" />
        </div>

        <div class="mb-3">
            <label for="address" class="form-label">Adress</label>
            <input type="text" class="form-control" id="address" placeholder="Adress" @bind="currentUser.Address" @oninput="SetUpdated" />
        </div>

        @if (IsUpdated)
        {
            <div class="mb-3">
                <label for="password" class="form-label">Lösenord</label>
                <input type="password" class="form-control" id="password" placeholder="Lösenord" @bind="UpdatedUser.Password" @bind:event="oninput" />
            </div>

            @if (showSuccessMessage)
            {
                <div class="alert alert-success" role="alert">
                    Användarinformationen är uppdaterad!
                </div>
            }
            else if (showErrorMessage)
            {
                <div class="alert alert-danger" role="alert">
                    Fel vid uppdatering. Ange rätt lösenord.
                </div>
            }
        }

        <div class="mb-3">
            <div class="reset-password-link">
                <NavLink href="/resetPassword"><a>Jag har glömt mitt lösenord!</a></NavLink>
            </div>
        </div>


        <button class="btn btn-primary" disabled="@(!IsUpdated)"
        style="background-color: @(IsUpdated ? "black" : "gray"); color: white;" @onclick="UpdateUserInfo">
            Spara
        </button>
        <button @onclick="Logout" class="btn btn-primary">Logga ut</button>

        <table class="table fixed-table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th></th>
                    <th>Datum</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Orders)
                {
                    <tr @onclick="() => OpenModal(order)" style="cursor: pointer;">
                        <td>@order.Id</td>
                        <td></td>
                        <td>@order.PurchaseDate</td>
                        <td>@Translations.GetTranslatedOrderStatus(order.OrderStatus.Name)</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="mb-3">
            <label class="form-label">Totalt ordervärde: <a>@TotalOrderValue SEK</a></label>
        </div>

        <div class="modal fade @(isModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Orderinformation</h5>
                        <button type="button" class="close" @onclick="CloseModal">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if (selectedOrder != null)
                        {
                            <div class="form-group">
                                <label><strong>Order Id:</strong> @selectedOrder.Id</label>
                            </div>

                            <div class="form-group">
                                <label><strong>Orderstatus:</strong> @Translations.GetTranslatedOrderStatus(selectedOrder.OrderStatus.Name)</label>
                            </div>

                            <div class="form-group">
                                <label><strong>Datum:</strong> @selectedOrder.PurchaseDate</label>
                            </div>

                            <div class="form-group">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Produkt</th>
                                            <th>Pris</th>
                                            <th>Antal</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var product in selectedOrder.OrderProducts)
                                        {
                                            <tr>
                                                <td>@product.ProductName</td>
                                                <td>@product.CurrentPrice.ToString() SEK</td>
                                                <td>@product.Quantity</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <div class="form-group">
                                <label><strong>Totalpris:</strong> @selectedOrder.TotalPrice SEK</label>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Stäng</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p>Laddar användarinformation...</p>
}

@code {
    private UserResponse? currentUser { get; set; }
    private List<OrderResponse> Orders { get; set; } = new();
    private OrderResponse selectedOrder { get; set; }
    private double TotalOrderValue = 0.0;
    private bool IsUpdated = false;
    private bool isModalOpen = false;
    private UserCreate UpdatedUser { get; set; } = new();
    private bool showSuccessMessage = false;
    private bool showErrorMessage = false;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst("sub")?.Value;

            if (Guid.TryParse(userIdClaim, out Guid userId))
            {
                currentUser = await UserService.GetUserById(userId);
            }
        }

        Orders = await OrderService.GetOrdersByUserEmail(currentUser.Email);
        GetTotalOrderValue();
        StateHasChanged();
    }

    private void GetTotalOrderValue()
    {
        foreach (var order in Orders)
        {
            TotalOrderValue += order.TotalPrice;
        }
    }
    private void SetUpdated()
    {
        IsUpdated = true;
    }
    private async Task UpdateUserInfo()
    {
        var roles = await UserService.GetAllRoles();

        UpdatedUser.FirstName = currentUser.FirstName;
        UpdatedUser.LastName = currentUser.LastName;
        UpdatedUser.Email = currentUser.Email;
        UpdatedUser.Phone = currentUser.Phone;
        UpdatedUser.Address = currentUser.Address;
        UpdatedUser.RoleId = roles.FirstOrDefault(r => r.Name == currentUser.Role.Name).Id;

        var returnedUpdatedUser = await UserService.UpdateUser(currentUser.Id, UpdatedUser);

        var returnedIsUpdated = await CheckIfUpdated(returnedUpdatedUser);

        if (returnedIsUpdated)
        {
            currentUser = returnedUpdatedUser;
            IsUpdated = false;
        }
        else
        {
            IsUpdated = true;
        }
    }

    private async Task<bool> CheckIfUpdated(UserResponse returnedUser)
    {
        var returnedIsUpdated = false;

        if (returnedUser.FirstName == UpdatedUser.FirstName &&
            returnedUser.LastName == UpdatedUser.LastName &&
            returnedUser.Email == UpdatedUser.Email &&
            returnedUser.Phone == UpdatedUser.Phone &&
            returnedUser.Address == UpdatedUser.Address)
        {
            showSuccessMessage = true;
            returnedIsUpdated = true;
        }
        else
        {
            showErrorMessage = true;
        }

        await InvokeAsync(StateHasChanged);

        await Task.Delay(2500);
        showSuccessMessage = false;
        showErrorMessage = false;

        await InvokeAsync(StateHasChanged);
        return returnedIsUpdated;
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");

        if (AuthenticationStateProvider is AuthStateProvider authProvider)
        {
            await authProvider.LogoutUser();
        }

        Navigation.NavigateTo("/", forceLoad: true);
    }
    private void OpenModal(OrderResponse order)
    {
        selectedOrder = new OrderResponse
            {
                Id = order.Id,
                User = order.User,
                PurchaseDate = order.PurchaseDate,
                OrderStatus = order.OrderStatus,
                TotalPrice = order.TotalPrice,
                OrderProducts = order.OrderProducts
            };
        isModalOpen = true;
    }
    private void CloseModal()
    {
        isModalOpen = false;
        selectedOrder = null;
    }
}
