@page "/user"
@using GymShopBlazor.ApiService
@using GymShopBlazor.AuthService
@using GymShopBlazor.Helpers
@using GymShopBlazor.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject OrderService OrderService

<head>
    <link href="css/userstyling.css" rel="stylesheet" />
</head>

@if (CurrentUser != null)
{
    <div class="user-form">
        <h3>Välkommen @CurrentUser.FirstName @CurrentUser.LastName</h3>

        <div class="mb-3">
            <label for="firstname" class="form-label">Förnamn</label>
            <input type="text" class="form-control" id="firstname" placeholder="Förnamn" @bind="CurrentUser.FirstName" @oninput="SetUpdated" />
        </div>

        <div class="mb-3">
            <label for="lastname" class="form-label">Efternamn</label>
            <input type="text" class="form-control" id="lastname" placeholder="Efternamn" @bind="CurrentUser.LastName" @oninput="SetUpdated" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">E-post</label>
            <input type="email" class="form-control" id="email" placeholder="E-post" @bind="CurrentUser.Email" @oninput="SetUpdated" />
        </div>

        <div class="mb-3">
            <label for="phone" class="form-label">Telefonnummer</label>
            <input type="text" class="form-control" id="phone" placeholder="Telefonnummer" @bind="CurrentUser.Phone" @oninput="SetUpdated" />
        </div>

        <div class="mb-3">
            <label for="address" class="form-label">Adress</label>
            <input type="text" class="form-control" id="address" placeholder="Adress" @bind="CurrentUser.Address" @oninput="SetUpdated" />
        </div>

        @if (_isUpdated)
        {
            <div class="mb-3">
                <label for="password" class="form-label">Lösenord</label>
                <input type="password" class="form-control" id="password" placeholder="Lösenord" @bind="UpdatedUser.Password" @bind:event="oninput" />
            </div>

            @if (_showSuccessMessage)
            {
                <div class="alert alert-success" role="alert">
                    @_updatedMessage
                </div>
            }
            else if (_showErrorMessage)
            {
                <div class="alert alert-danger" role="alert">
                    @_updatedMessage
                </div>
            }
        }

        <div class="mb-3">
            <div class="reset-password-link">
                <NavLink href="/resetPassword"><a>Jag har glömt mitt lösenord!</a></NavLink>
            </div>
        </div>


        <button class="btn btn-primary" disabled="@(!_isUpdated || string.IsNullOrEmpty(UpdatedUser.Password))"
        style="background-color: @((_isUpdated && !string.IsNullOrEmpty(UpdatedUser.Password)) ? "black" : "gray"); color: white;" @onclick="UpdateUserInfo">
            Spara
        </button>
        <button @onclick="Logout" class="btn btn-primary">Logga ut</button>

        @if (!_isAdmin)
        {
            <table class="table fixed-table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th></th>
                        <th>Datum</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Orders)
                    {
                        <tr @onclick="() => OpenModal(order)" style="cursor: pointer;">
                            <td>@order.Id</td>
                            <td></td>
                            <td>@order.PurchaseDate</td>
                            <td>@Translations.GetTranslatedOrderStatus(order.OrderStatus.Name)</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="mb-3">
                <label class="form-label">Totalt ordervärde: <a>@_totalOrderValue SEK</a></label>
            </div>

            <div class="modal fade @(_isModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Orderinformation</h5>
                            <button type="button" class="close" @onclick="CloseModal">
                                <span>&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            @if (SelectedOrder != null)
                            {
                                <div class="form-group">
                                    <label><strong>Order Id:</strong> @SelectedOrder.Id</label>
                                </div>

                                <div class="form-group">
                                    <label><strong>Orderstatus:</strong> @Translations.GetTranslatedOrderStatus(SelectedOrder.OrderStatus.Name)</label>
                                </div>

                                <div class="form-group">
                                    <label><strong>Datum:</strong> @SelectedOrder.PurchaseDate</label>
                                </div>

                                <div class="form-group">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Produkt</th>
                                                <th>Pris</th>
                                                <th>Antal</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var product in SelectedOrder.OrderProducts)
                                            {
                                                <tr>
                                                    <td>@product.ProductName</td>
                                                    <td>@product.CurrentPrice.ToString() SEK</td>
                                                    <td>@product.Quantity</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <div class="form-group">
                                    <label><strong>Totalpris:</strong> @SelectedOrder.TotalPrice SEK</label>
                                </div>
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Stäng</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <br />
            <br />
        }
        <button @onclick="ConfirmDelete" class="btn btn-primary">Radera konto</button>

    </div>

    <div class="modal fade @(_isDeleteModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bekräfta kontoradering</h5>
                    <button type="button" class="close" @onclick="CloseDeleteModal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Vill du verkligen radera ditt konto? <br/>Din orderinformation kommer försvinna.</p>

                    <div class="form-group">
                        <label for="password">Bekräfta med ditt lösenord:</label>
                        <input type="password" id="password" class="form-control" @bind="_password" placeholder="Ange ditt lösenord" />
                    </div>
                </div>

                @if (_showSuccessMessage)
                {
                    <div class="alert alert-success" role="alert">
                        @_updatedMessage
                    </div>
                }
                else if (_showErrorMessage)
                {
                    <div class="alert alert-danger" role="alert">
                        @_updatedMessage
                    </div>
                }

                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteUser" disabled="@string.IsNullOrEmpty(_password)">Ja, radera</button>
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Stäng</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private UserResponse? CurrentUser { get; set; }
    private List<OrderResponse> Orders { get; set; } = new();
    private OrderResponse? SelectedOrder { get; set; }
    private double _totalOrderValue = 0.0;
    private bool _isUpdated = false;
    private bool _isModalOpen = false;
    private bool _isDeleteModalOpen = false;
    private bool _isAdmin = false;
    private UserCreate UpdatedUser { get; set; } = new UserCreate { Password = "" };
    private bool _showSuccessMessage = false;
    private bool _showErrorMessage = false;
    private string _updatedMessage = "";
    private string _password = "";

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst("sub")?.Value;

            if (Guid.TryParse(userIdClaim, out Guid userId))
            {
                CurrentUser = await UserService.GetUserById(userId);
            }

            _isAdmin = user.Identity.IsAuthenticated && user.IsInRole("Admin");
        }

        Orders = await OrderService.GetOrdersByUserEmail(CurrentUser.Email);
        GetTotalOrderValue();
        StateHasChanged();
    }

    private void GetTotalOrderValue()
    {
        foreach (var order in Orders)
        {
            _totalOrderValue += order.TotalPrice;
        }
    }
    private void SetUpdated()
    {
        _isUpdated = true;
    }

    private void ConfirmDelete()
    {
        _isDeleteModalOpen = true;
    }
    private async Task DeleteUser()
    {
        var isPasswordValid = await UserService.ValidatePassword(CurrentUser.Email, _password);

        if (!isPasswordValid)
        {
            _showErrorMessage = true;
            _updatedMessage = "Fel lösenord.";
            StateHasChanged();
            await Task.Delay(2500);
            _showErrorMessage = false;
            _updatedMessage = "";
            return;
        }

        await UserService.DeleteUser(CurrentUser.Id);
        await Logout();
    }
    private void CloseDeleteModal()
    {
        _isDeleteModalOpen = false;
    }
   
    private async Task UpdateUserInfo()
    {
        var IsCorrectPassword = await UserService.ValidatePassword(CurrentUser.Email, UpdatedUser.Password);
        if (IsCorrectPassword == false)
        {
            _updatedMessage = "Ange rätt lösenord.";
            _showErrorMessage = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(2500);
            _updatedMessage = "Ange rätt lösenord.";
            _showErrorMessage = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        var roles = await UserService.GetAllRoles();

        UpdatedUser.FirstName = CurrentUser.FirstName;
        UpdatedUser.LastName = CurrentUser.LastName;
        UpdatedUser.Email = CurrentUser.Email;
        UpdatedUser.Phone = CurrentUser.Phone;
        UpdatedUser.Address = CurrentUser.Address;
        UpdatedUser.RoleId = roles.FirstOrDefault(r => r.Name == CurrentUser.Role.Name).Id;

        var returnedUpdatedUser = await UserService.UpdateUser(CurrentUser.Id, UpdatedUser);

        var returnedIsUpdated = await CheckIfUpdated(returnedUpdatedUser);

        if (returnedIsUpdated)
        {
            CurrentUser = returnedUpdatedUser;
            _isUpdated = false;
        }
        else
        {
            _isUpdated = true;
        }
    }

    private async Task<bool> CheckIfUpdated(UserResponse returnedUser)
    {
        var returnedIsUpdated = false;

        if (returnedUser.FirstName == UpdatedUser.FirstName &&
            returnedUser.LastName == UpdatedUser.LastName &&
            returnedUser.Email == UpdatedUser.Email &&
            returnedUser.Phone == UpdatedUser.Phone &&
            returnedUser.Address == UpdatedUser.Address)
        {
            _updatedMessage = "Användaruppgifterna är uppdaterade!";
            _showSuccessMessage = true;
            returnedIsUpdated = true;
        }
        else
        {
            _updatedMessage = "Fel vid uppdatering."; 
            _showErrorMessage = true;
        }

        await InvokeAsync(StateHasChanged);

        await Task.Delay(2500);
        _showSuccessMessage = false;
        _showErrorMessage = false;

        await InvokeAsync(StateHasChanged);
        return returnedIsUpdated;
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");

        if (AuthenticationStateProvider is AuthStateProvider authProvider)
        {
            await authProvider.LogoutUser();
        }

        Navigation.NavigateTo("/", forceLoad: true);
    }
    private void OpenModal(OrderResponse order)
    {
        SelectedOrder = new OrderResponse
            {
                Id = order.Id,
                User = order.User,
                PurchaseDate = order.PurchaseDate,
                OrderStatus = order.OrderStatus,
                TotalPrice = order.TotalPrice,
                OrderProducts = order.OrderProducts
            };
        _isModalOpen = true;
    }
    private void CloseModal()
    {
        _isModalOpen = false;
        SelectedOrder = null;
    }
}
