@page "/"
@using GymShopBlazor.ApiService
@using GymShopBlazor.Helpers
@using GymShopBlazor.Models

<head>
    <link href="css/product.css" rel="stylesheet" />
</head>


<div class="index-header">
    <img src="GymShopHeader.png" alt="Välkommen till Gym Shop"/>
</div>


@if (isLoading)
{
    <div class="loading-info">
        <h3>Laddar produkter...</h3>
    </div>
}
else if (!isLoading && !products.Any())
{
    <div class="loading-info">
        <h3>Inga produkter hittades.</h3>
    </div>
}
else
{
    <div class="product-container">
        @foreach (var category in categories)
        {
            var productsInCategory = products
            .Where(p => p.Category.Id == category.Id)
            .Take(5)
            .ToList();

            if (productsInCategory.Any())
            {
                <div class="category-section">
                    <h3>@Translations.GetTranslatedCategoryName(category.Name)</h3>
                    <div class="product-list">
                        @foreach (var product in productsInCategory)
                        {
                            <ProductComponent Product="product" OnProductClick="OpenModal" />
                        }
                    </div>
                </div>
            }
        }
    </div>
}

<div class="modal fade @(isModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@selectedProduct?.Name</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (selectedProduct != null)
                {
                    <div class="form-group">
                        <div>
                            <img src="@selectedProduct.ImageUrl" alt="Produktbild" class="img-fluid" style="max-width: 200px; height: auto;" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label><strong>Kategori:</strong> @Translations.GetTranslatedCategoryName(selectedProduct.Category.Name)</label>
                    </div>

                    <div class="form-group">
                        <label><strong>Lagerstatus:</strong> @Translations.GetTranslatedProductStatus(selectedProduct.ProductStatus.Name)</label>
                    </div>

                    <div class="form-group">
                        <label><strong>Lagersaldo:</strong> @selectedProduct.Balance ST</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Pris:</strong> @selectedProduct.Price SEK</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Produktbeskrivning:</strong> @selectedProduct.Description</label>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Stäng</button>
                @if (selectedProduct?.Balance > 0)
                {
                    <button type="button" class="add-to-cart-button" @onclick="() => HandleAddToCart(selectedProduct)">Köp</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Product> products = new();
    private List<Category> categories = new();
    private bool isLoading = true;
    private Product? selectedProduct; 
    private bool isModalOpen = false;

    [Inject] private ProductService ProductService { get; set; } = default!;
    [Inject] private CartService CartService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAll();
        categories = await ProductService.GetCategories();
        isLoading = false;
    }

    private void OpenModal(Product product)
    {
        selectedProduct = product;
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        selectedProduct = null;
    }

    private void HandleAddToCart(Product product)
    {
        if (product.Balance > 0)
        {
            CartService.AddToCart(product);
            Console.WriteLine($"{product.Name} tillagd i varukorgen!");
            CloseModal();
        }
    }
}
