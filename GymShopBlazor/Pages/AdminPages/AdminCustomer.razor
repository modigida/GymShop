@page "/admin/customers"
@layout Admin
@using GymShopBlazor.ApiService
@using GymShopBlazor.Helpers
@using GymShopBlazor.Models
@inject UserService UserService
@inject OrderService OrderService
@inherits LayoutComponentBase

<head>
    <link href="css/admin.css" rel="stylesheet" />
</head>

<h3>Kunder</h3>

<div class="form-group search-container">
    <input type="text" class="form-control" placeholder="Sök efter e-postadress..." @bind="searchQuery" @oninput="FilterUsers" />
</div>

<table class="table fixed-table">
    <thead>
        <tr>
            <th>Id</th>
            <th></th>
            <th>Namn</th>
            <th>E-post</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in filteredUsers)
        {
            <tr @onclick="() => OpenModal(user)" style="cursor: pointer;">
                <td>@user.Id</td>
                <td></td>
                <td>@user.ToString()</td>
                <td>@user.Email</td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade @(isModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kundinformation</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (selectedUser != null)
                {
                    <p>Endast kunden själv kan uppdatera sina uppgifter.</p>
                    <div class="form-group">
                        <label><strong>Id: </strong> @selectedUser.Id</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Namn:</strong> @selectedUser.ToString()</label>
                    </div>
                    <div class="form-group">
                        <label><strong>E-post: </strong>@selectedUser.Email</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Telefonnummer: </strong>@selectedUser.Phone</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Adress: </strong>@selectedUser.Address</label>
                    </div>

                    if (orders.Any())
                    {
                        <div class="form-group">
                            <table class="table table-sm">
                                <thead>
                                <tr>
                                    <th>Order Id</th>
                                    <th>Pris</th>
                                    <th>Datum</th>
                                    <th>Orderstatus</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var order in orders)
                                {
                                    <tr>
                                        <td>@order.Id</td>
                                        <td>@order.TotalPrice.ToString() SEK</td>
                                        <td>@order.PurchaseDate</td>
                                        <td>@Translations.GetTranslatedOrderStatus(order.OrderStatus.Name)</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Stäng</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Radera användare</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(isDeleteModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bekräfta borttagning</h5>
                <button type="button" class="close" @onclick="CloseDeleteModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Vill du verkligen radera kontot för kund: <br/><strong>@selectedUser?.ToString()</strong>?</p>
                <p>Observera att alla kundens ordrar kommer försvinna från historiken.</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" @onclick="DeleteUser">Ja, radera</button>
                <button class="btn btn-secondary" @onclick="CloseDeleteModal">Stäng</button>
            </div>
        </div>
    </div>
</div>


@code {
    private List<UserResponse> users = new List<UserResponse>();
    private UserResponse? selectedUser;
    private bool isModalOpen = false;
    private bool isDeleteModalOpen = false;
    private List<OrderResponse>? orders = new List<OrderResponse>();

    private List<UserResponse> filteredUsers = new List<UserResponse>();
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAll();
        filteredUsers = users;
    }
    private void FilterUsers(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        filteredUsers = users
            .Where(u => u.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task OpenModal(UserResponse user)
    {
        selectedUser = new UserResponse
        {
            Id = user.Id,
            FirstName = user.FirstName,
            LastName = user.LastName,
            Email = user.Email,
            Phone = user.Phone,
            Address = user.Address
        };
        orders = await OrderService.GetOrdersByUserEmail(selectedUser.Email);
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        selectedUser = null;
    }
    private void CloseDeleteModal()
    {
        isDeleteModalOpen = false;
    }

    private void ConfirmDelete()
    {
        isDeleteModalOpen = true;
    }

    private async Task DeleteUser()
    {
        if (selectedUser == null) return;

        bool success = await UserService.DeleteUser(selectedUser.Id);

        if (success)
        {
            users = await UserService.GetAll();
            filteredUsers = users;
            CloseDeleteModal();
            CloseModal();
        }
        else
        {
            Console.WriteLine("Kunde inte radera användaren.");
        }
    }
}
