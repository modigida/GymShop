@page "/admin/products"
@layout Admin
@using GymShopBlazor.ApiService
@using GymShopBlazor.Models
@using GymShopBlazor.Helpers
@inject ProductService ProductService
@inherits LayoutComponentBase

<head>
    <link href="css/admin.css" rel="stylesheet" />
</head>

<div class="header-container">
    <h3>Produkter</h3>
    <button class="add-product-btn" @onclick="OpenAddProductModal">Skapa ny produkt</button>
</div>


<div class="form-group search-container">
    <input type="text" class="form-control" placeholder="Sök efter produkt..." @bind="searchQuery" @oninput="FilterProducts" />
</div>

<table class="table fixed-table">
    <thead>
        <tr>
            <th>Namn</th>
            <th></th>
            <th>Pris</th>
            <th>Antal i lager</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in filteredProducts)
        {
            <tr @onclick="() => OpenModal(product)" style="cursor: pointer;">
                <td>@product.Name</td>
                <td></td>
                <td>@product.Price</td>
                <td>@product.Balance</td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade @(isModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Produktinformation</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (selectedProduct != null)
                {
                    <div class="form-group">
                        <div>
                            @if (selectedProduct.Id != 0 && !string.IsNullOrEmpty(selectedProduct.ImageUrl))
                            {
                                <img src="@selectedProduct.ImageUrl" alt="Produktbild" class="img-fluid" style="max-width: 200px; height: auto;" />
                            }
                            else
                            {
                                <img src="noImage.jpg" alt="Produktbild" class="img-fluid" style="max-width: 200px; height: auto;" />
                            }
                        </div>
                    </div>

                    <div class="form-group">
                        <label><strong>Id: </strong>@selectedProduct.Id</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Produktnamn:</strong></label>
                        <input class="form-control" @bind="selectedProduct.Name" />
                    </div>

                    <div class="form-group">
                        <label><strong>Kategori:</strong></label>
                        <select class="form-control" @bind="selectedProduct.Category.Id"> 
                            <option value="">Välj kategori</option> 
                            @foreach (var category in categories) 
                            {
                                <option value="@category.Id">@Translations.GetTranslatedCategoryName(category.Name), @category.Id</option>
                            } 
                        </select>
                    </div> 

                    <div class="form-group">
                        <label><strong>Lagerstatus:</strong></label>
                        <select class="form-control" @bind="selectedProduct.ProductStatus.Id"> 
                            <option value="">Välj lagerstatus</option> 
                            @foreach (var status in productStatuses)
                            {
                                <option value="@status.Id">@Translations.GetTranslatedProductStatus(status.Name), @status.Id</option>
                            } 
                        </select>
                    </div> 

                    <div class="form-group">
                        <label><strong>Lagersaldo:</strong></label>
                        <input class="form-control" @bind="selectedProduct.Balance" type="number" />
                    </div>
                    <div class="form-group">
                        <label><strong>Pris:</strong></label>
                        <input class="form-control" @bind="selectedProduct.Price" type="number" step="0.01" />
                    </div>
                    <div class="form-group">
                        <label><strong>Produktbeskrivning:</strong></label>
                        <textarea class="form-control" @bind="selectedProduct.Description"></textarea>
                    </div>
                    <div class="form-group">
                        <label><strong>Bildlänk:</strong></label>
                        <input class="form-control" @bind="selectedProduct.ImageUrl" />
                    </div>
                }
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Stäng</button>
                @if (selectedProduct?.Id != 0)
                {
                    <button type="button" class="btn btn-success" @onclick="UpdateProduct">Spara</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Radera produkt</button>
                }
                else
                {
                    <button type="button" class="btn btn-success" @onclick="CreateProduct">Spara</button>
                }

            </div>
        </div>
    </div>
</div>


<div class="modal fade @(IsDeleteModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bekräfta borttagning</h5>
                <button type="button" class="close" @onclick="CloseDeleteModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Vill du verkligen radera order: <strong>@selectedProduct?.Id</strong>?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" @onclick="DeleteProduct">Ja, radera</button>
                <button class="btn btn-secondary" @onclick="CloseDeleteModal">Stäng</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Product> products = new();
    private Product selectedProduct;
    private bool isModalOpen = false;
    private bool IsDeleteModalOpen = false;
    private string errorMessage = "";
    private string successMessage = "";

    private List<Product> filteredProducts = new();
    private string searchQuery = "";


    private List<Category> categories = new();
    private List<ProductStatus> productStatuses = new();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAll();
        categories = await ProductService.GetCategories();
        productStatuses = await ProductService.GetProductStatuses();
        Console.WriteLine($"Categories Count: {categories.Count}");
        Console.WriteLine($"ProductStatuses Count: {productStatuses.Count}");
        filteredProducts = products;
    }

    private void FilterProducts(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        filteredProducts = products
            .Where(p => p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void OpenModal(Product product)
    {
        selectedProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Category = product.Category,
            ProductStatus = product.ProductStatus,
            Balance = product.Balance,
            Price = product.Price,
            Description = product.Description,
            ImageUrl = product.ImageUrl
        };
        isModalOpen = true;
    }
    private void CloseModal()
    {
        isModalOpen = false;
    }
    private void CloseDeleteModal()
    {
        IsDeleteModalOpen = false;
    }

    private void ConfirmDelete()
    {
        IsDeleteModalOpen = true;
    }

    private void OpenAddProductModal()
    {
        selectedProduct = new Product
        {
            Id = 0,
            Name = "Ny produkt",
            Category = categories.FirstOrDefault(),
            ProductStatus = productStatuses.FirstOrDefault(),
            Balance = 0,
            Price = 0,
            Description = string.Empty,
            ImageUrl = string.Empty
        };
        isModalOpen = true;
    }

    private async Task CreateProduct()
    {
        var responseProductCreate = await ProductService.CreateProduct(selectedProduct);
        if (responseProductCreate.Id != 0)
        {
            products.Add(responseProductCreate);
            selectedProduct = responseProductCreate;
            filteredProducts = new List<Product>(products);
            successMessage = "Produkten har skapats";
            StateHasChanged();
            await Task.Delay(2500);
            successMessage = "";
        }
        else
        {
            errorMessage = "Fel vid skapande av produkt";
            StateHasChanged();
            await Task.Delay(2500);
            errorMessage = "";
        }
        CloseModal();
        await OnInitializedAsync();
    }
    private async Task UpdateProduct()
    {
        var responseProductUpdate = await ProductService.UpdateProduct(selectedProduct);
        if (responseProductUpdate.Id != 0)
        {
            var productIndex = products.FindIndex(p => p.Id == responseProductUpdate.Id);
            if (productIndex != -1)
            {
                products[productIndex] = responseProductUpdate;
            }
            filteredProducts = new List<Product>(products);

            successMessage = "Produkten har uppdaterats";
            StateHasChanged();
            await Task.Delay(2500);
            successMessage = "";
        }
        else
        {
            errorMessage = "Fel vid uppdatering";
            StateHasChanged();
            await Task.Delay(2500);
            errorMessage = "";
        }
        CloseModal();
    }
    private async Task DeleteProduct()
    {
        CloseDeleteModal();
        if (await ProductService.DeleteProduct(selectedProduct.Id))
        {
            products = products.Where(p => p.Id != selectedProduct.Id).ToList();
            filteredProducts = new List<Product>(products);
            StateHasChanged();
            CloseModal();
            
        }
        else
        {
            errorMessage = "Kunde inte radera produkten";
            await Task.Delay(2500);
            errorMessage = "";
        }
    }

}
