@page "/admin/orders"
@layout Admin
@using GymShopBlazor.ApiService
@using GymShopBlazor.Helpers
@using GymShopBlazor.Models
@inject OrderService OrderService
@inherits LayoutComponentBase

<head>
    <link href="css/admin.css" rel="stylesheet" />
</head>

<h3>Ordrar</h3>

<div class="form-group search-container">
    <input type="text" class="form-control" placeholder="Sök efter kund id..." @bind="_searchQuery" @oninput="FilterOrders" />
</div>

<table class="table fixed-table">
    <thead>
        <tr>
            <th>Id</th>
            <th></th>
            <th>Datum</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in _filteredOrders)
        {
            <tr @onclick="() => OpenModal(order)" style="cursor: pointer;">
                <td>@order.Id</td>
                <td></td>
                <td>@order.PurchaseDate</td>
                <td>@Translations.GetTranslatedOrderStatus(order.OrderStatus.Name)</td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade @(_isModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Orderinformation</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (SelectedOrder != null)
                {
                    <p>Du kan endast uppdatera orderstatus. <br/> Vid felaktig order skall den raderas. <br/>
                        Kunden får skapa en ny order.</p>
                    <div class="form-group">
                        <label><strong>Order Id:</strong> @SelectedOrder.Id</label>
                    </div>
                    <div class="form-group">
                        <label><strong>Kund Id:</strong> @SelectedOrder.User.Id</label>
                    </div>

                    <div class="form-group">
                        <label><strong>Orderstatus:</strong></label>
                        <select class="form-control" @bind="SelectedStatusId">
                            <option value="" >Välj kategori</option> 
                            @foreach (var status in _orderStatuses) 
                            {
                                <option value="@status.Id">@Translations.GetTranslatedOrderStatus(status.Name)</option>
                            } 
                        </select> 
                    </div> 

                    <div class="form-group">
                        <label><strong>Datum:</strong> @SelectedOrder.PurchaseDate</label>
                    </div>

                    <div class="form-group">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Produkt</th>
                                    <th>Pris</th>
                                    <th>Antal</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in SelectedOrder.OrderProducts)
                                {
                                    <tr>
                                        <td>@product.ProductName</td>
                                        <td>@product.CurrentPrice.ToString() SEK</td>
                                        <td>@product.Quantity</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="form-group">
                        <label><strong>Totalpris:</strong> @SelectedOrder.TotalPrice SEK</label>
                    </div>
                }
            </div>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @_errorMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @_successMessage
                </div>
            }
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Stäng</button>
                <button type="button" class="btn btn-success" @onclick="UpdateOrder">Uppdatera</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Radera order</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(_isDeleteModalOpen ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bekräfta borttagning</h5>
                <button type="button" class="close" @onclick="CloseDeleteModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Vill du verkligen radera order: <strong>@SelectedOrder?.Id</strong>?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" @onclick="DeleteOrder">Ja, radera</button>
                <button class="btn btn-secondary" @onclick="CloseDeleteModal">Stäng</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<OrderResponse> Orders { get; set; } = new();
    private OrderResponse SelectedOrder { get; set; }
    private int SelectedStatusId { get; set; }
    private bool _isModalOpen = false;
    private bool _isDeleteModalOpen = false;
    private List<OrderResponse> _filteredOrders = new List<OrderResponse>();
    private string _searchQuery = "";
    private string _errorMessage = "";
    private string _successMessage = "";

    private List<OrderStatus> _orderStatuses = new List<OrderStatus>();

    protected override async Task OnInitializedAsync()
    {
        Orders = await OrderService.GetAll();
        _orderStatuses = await OrderService.GetOrderStatuses();
        _filteredOrders = Orders;
    }

    private void FilterOrders(ChangeEventArgs e)
    {
        _searchQuery = e.Value?.ToString() ?? "";
        _filteredOrders = Orders
            .Where(o => o.User.Id.ToString().Contains(_searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
    private void OpenModal(OrderResponse order)
    {
        SelectedOrder = new OrderResponse
        {
            Id = order.Id,
            User = order.User,
            PurchaseDate = order.PurchaseDate,
            OrderStatus = order.OrderStatus,
            TotalPrice = order.TotalPrice,
            OrderProducts = order.OrderProducts
        };
        SelectedStatusId = order.OrderStatus.Id;
        _isModalOpen = true;
    }
    private void CloseModal()
    {
        _isModalOpen = false;
        SelectedOrder = null;
    }
    private void CloseDeleteModal()
    {
        _isDeleteModalOpen = false;
    }
    private async Task ConfirmDelete()
    {
        if (SelectedOrder.OrderStatus.Id == 3)
        {
            _errorMessage = "Du kan inte ta bort ordrar som är markerade som \"Avslutad\"";
            await Task.Delay(2500);
            _errorMessage = "";
            return;
        }

        _isDeleteModalOpen = true;
    }

    private async Task UpdateOrder()
    {
        if (SelectedOrder.OrderStatus.Id == 3)
        {
            _errorMessage = "Du kan inte uppdatera ordrar som är markerade som \"Avslutad\"";
            await Task.Delay(2500);
            _errorMessage = "";
            return;
        }
        var newStatus = _orderStatuses.FirstOrDefault(s => s.Id == SelectedStatusId);
        if (newStatus != null && newStatus != SelectedOrder.OrderStatus)
        {
            var updatedOrder = new OrderCreate
            {
                Id = SelectedOrder.Id,
                User = SelectedOrder.User,
                PurchaseDate = SelectedOrder.PurchaseDate,
                    OrderStatus = newStatus,
                OrderProducts = SelectedOrder.OrderProducts
            };
            var responseOrderUpdate = await OrderService.UpdateOrder(updatedOrder);
            if (responseOrderUpdate.Id != 0)
            {
                var orderIndex = Orders.FindIndex(o => o.Id == responseOrderUpdate.Id);
                if (orderIndex != -1)
                {
                    Orders[orderIndex] = responseOrderUpdate;
                }

                _filteredOrders = new List<OrderResponse>(Orders);

                _successMessage = "Ordern har uppdaterats";
                StateHasChanged();
                await Task.Delay(2500);
                _successMessage = "";
            }
            StateHasChanged();
        }
    }
    private async Task DeleteOrder()
    {
        CloseDeleteModal();
        if (await OrderService.DeleteOrder(SelectedOrder.Id))
        {
            Orders = Orders.Where(o => o.Id != SelectedOrder.Id).ToList();
            _filteredOrders = new List<OrderResponse>(Orders);
            StateHasChanged();
            _successMessage = "Ordern har raderats";
            await Task.Delay(2500);
            _successMessage = "";
            CloseModal();
        }
        else
        {
            _errorMessage = "Kunde inte radera ordern"; 
            await Task.Delay(2500);
            _errorMessage = "";
        }
    }   
}
