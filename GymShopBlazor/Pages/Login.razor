@page "/login"
@using System.ComponentModel.Design
@using ApiService
@using Blazored.LocalStorage
@using GymShopBlazor.AuthService
@using GymShopBlazor.Event
@using Microsoft.AspNetCore.Components.Authorization
@using Models
@inject UserService UserService
@inject NavigationManager Navigation
@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthenticationStateNotifier AuthenticationStateNotifier
@inject MainLayout MainLayout

<head>
    <link href="css/userstyling.css" rel="stylesheet" />
</head>

<div class="user-form">
    <h3>Logga in på mina sidor</h3>
    <p>Välkommen till Gym Shop! Logga in med dina användaruppgifter</p>

    <div class="mb-3">
        <label for="email" class="form-label">E-post</label>
        <input type="email" class="form-control" id="email" placeholder="E-post" @bind="user.Email" @bind:event="oninput" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Lösenord</label>
        <input type="password" class="form-control" id="password" placeholder="Lösenord" @bind="user.Password" @bind:event="oninput" />
    </div>

    @if (showSuccessMessage)
    {
        <div class="alert alert-success" role="alert">
            Inloggad!
        </div>
    }
    else if (showErrorMessage)
    {
        <div class="alert alert-danger" role="alert">
            Fel användarnamn eller lösenord!
        </div>
    }
    <button class="btn btn-primary" @onclick="LoginUser" disabled="@(!IsFormValid)"
            style="background-color: @(IsFormValid ? "black" : "gray"); color: white;">
        Logga in
    </button>

    <div class="reset-password-link">
        <NavLink href="/resetPassword"><a>Jag har glömt mitt lösenord!</a></NavLink>
    </div>

    <h5>Är du ny kund?</h5>
    <NavLink href="/register" class="btn btn-secondary">Registrera dig här</NavLink>
</div>

@code {
    private UserLogin user = new();
    private bool showSuccessMessage = false;
    private bool showErrorMessage = false;

    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(user.Email) &&
        !string.IsNullOrWhiteSpace(user.Password);

    protected override void OnInitialized()
    {
        AuthenticationStateNotifier.StateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        AuthenticationStateNotifier.StateChanged -= StateHasChanged;
    }

    private async Task LoginUser()
    {
        if (!IsFormValid)
        {
            return;
        }

        var token = await UserService.LoginUser(user);
        if (!string.IsNullOrEmpty(token))
        {
            await _localStorage.SetItemAsync("authToken", token);

            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;
            MainLayout.IsAdmin = user.Identity.IsAuthenticated && user.IsInRole("Admin");
            if (MainLayout.IsAdmin == true) { Console.WriteLine("Inloggad som admin"); }

            ((AuthStateProvider)AuthenticationStateProvider).NotifyUserAuthentication(token);

            showSuccessMessage = true;
            StateHasChanged();

            await Task.Delay(2000);

            Navigation.NavigateTo("/");
        }
        else
        {
            showErrorMessage = true;
        }
    }
}
