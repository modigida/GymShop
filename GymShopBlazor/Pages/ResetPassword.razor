@page "/resetPassword"
@using GymShopBlazor.ApiService
@using GymShopBlazor.AuthService
@using GymShopBlazor.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService

<head>
    <link href="css/userstyling.css" rel="stylesheet" />
</head>

<div class="user-form">
    <h3>Glömt lösenord?</h3>
    <p>
        Du kan återställa förlorad information. <br /><br />Skicka ett meddelande till vår kundservice via formuläret
        nedan så hjälper vi dig att återställa ditt lösenord.
    </p>

    <div class="mb-3">
        <label for="email" class="form-label">E-post</label>
        <input type="email" class="form-control" id="email" placeholder="E-post" @bind="_email" @bind:event="oninput" />
    </div>

    <div class="mb-3">
        <label for="message" class="form-label">Meddelande</label>
        <textarea class="form-control" id="message" rows="3" placeholder="Meddelande"></textarea>
    </div>

    @if (_isMessageSent)
    {
        <div class="alert alert-success">
            @((MarkupString)_message)
        </div>
    }
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger">
            @_errorMessage
        </div>
    }

    <button class="btn btn-primary" @onclick="SendMessage" disabled="@IsSendButtonDisabled">Skicka</button>
</div>



@code {
    private bool _isMessageSent = false;
    private string _message = string.Empty;
    private string _errorMessage = string.Empty;
    private string _email = string.Empty;
    private UserResponse? LoggedInUser { get; set; }
    private bool IsSendButtonDisabled => string.IsNullOrWhiteSpace(_email);

    [Inject] private NavigationManager Navigation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst("sub")?.Value;

            if (Guid.TryParse(userIdClaim, out Guid userId))
            {
                LoggedInUser = await UserService.GetUserById(userId);
            }
        }

        StateHasChanged();
    }
    private async Task SendMessage()
    {
        var isValid = await CheckEmail();
        if (!isValid)
        {
            return;
        }
        _isMessageSent = true;
        _message = "Tack för ditt meddelande, vi återkommer till dig inom 24 timmar.";
        StateHasChanged();

        await Task.Delay(2000);

        _message = $"Observera att detta är en spökfunktion. <br/>Du kommer inte få någon återkoppling.";

        StateHasChanged();

        await Task.Delay(2500);

        _isMessageSent = false;

        StateHasChanged();

        Navigation.NavigateTo("/");
    }

    public async Task<bool> CheckEmail()
    {
        if (!string.IsNullOrEmpty(_email) && _email == LoggedInUser.Email)
        {
            return true;
        }
        else
        {
            _errorMessage = "Felaktig e-postadress.";
            await Task.Delay(2000);

            _errorMessage = "";
            return false;
        }
    }
}
