@using GymShopBlazor.Event
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthenticationStateNotifier AuthenticationStateNotifier
@inject NavigationManager Navigation

<head>
    <link href="css/navbar.css" rel="stylesheet" />
</head>

<div class="navbar">
    <div class="top-nav-links">
        <NavLink href="/products">Alla produkter</NavLink>
        <NavLink href="/products?category=clothes">Träningskläder</NavLink>
        <NavLink href="/products?category=supplements">Kosttillskott</NavLink>
        <NavLink href="/products?category=equipments">Träningstillbehör</NavLink>
    </div>

    <div class="brand">
        <NavLink href="/">
            <img src="textlogo.png" alt="Logga"/>
        </NavLink>
    </div>

    <div class="top-navbar-icons">
        <NavLink href="/login" class="user-icon">👤</NavLink>
        @if (IsAdmin)
        {
            <NavLink href="/admin" class="admin-icon">⚙️</NavLink>
        }
        else
        {
            <NavLink href="/cart" class="cart-icons">🛒</NavLink>
        }
    </div>
</div>

<main>
    <article class="content px-4">
        @Body
    </article>
</main>

@code
{
    public bool IsAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        IsAdmin = user.Identity.IsAuthenticated && user.IsInRole("Admin");
        if (IsAdmin == true){ Console.WriteLine("Inloggad som admin");}

        AuthenticationStateNotifier.StateChanged += OnStateChanged;
    }
    private void OnStateChanged()
    {
        _ = UpdateAdminStatusAsync();
    }

    private async Task UpdateAdminStatusAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        IsAdmin = user.Identity.IsAuthenticated && user.IsInRole("Admin");
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthenticationStateNotifier.StateChanged -= OnStateChanged;
    }
}